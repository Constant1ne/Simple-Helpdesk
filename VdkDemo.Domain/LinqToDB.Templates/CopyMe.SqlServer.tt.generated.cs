//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

using LinqToDB;
using LinqToDB.DataProvider.SqlServer;
using LinqToDB.Extensions;
using LinqToDB.Mapping;

namespace DataModels
{
	/// <summary>
	/// Database       : Claims
	/// Data Source    : (LocalDB)\MSSQLLocalDB
	/// Server Version : 13.00.4001
	/// </summary>
	public partial class ClaimsDB : LinqToDB.Data.DataConnection
	{
		public ITable<Claim>   Claims    { get { return this.GetTable<Claim>(); } }
		public ITable<History> Histories { get { return this.GetTable<History>(); } }

		public ClaimsDB()
		{
			InitDataContext();
		}

		/*public ClaimsDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}*/

        public ClaimsDB(string connectionStr)
            : base(ProviderName.SqlServer, connectionStr) {
            InitDataContext();
        }

        partial void InitDataContext();

		#region FreeTextTable

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}

		private static MethodInfo _freeTextTableMethod1 = typeof(ClaimsDB).GetMethod("FreeTextTable", new Type[] { typeof(string), typeof(string) });

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod1,
				field,
				text);
		}

		private static MethodInfo _freeTextTableMethod2 = 
			typeof(ClaimsDB).GetMethods()
				.Where(m => m.Name == "FreeTextTable" &&  m.IsGenericMethod && m.GetParameters().Length == 2)
				.Where(m => m.GetParameters()[0].ParameterType.IsGenericTypeEx() && m.GetParameters()[0].ParameterType.GetGenericTypeDefinition() == typeof(Expression<>))
				.Where(m => m.GetParameters()[1].ParameterType == typeof(string))
				.Single();

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				_freeTextTableMethod2,
				fieldSelector,
				text);
		}

		#endregion
	}

	[Table(Schema="dbo", Name="Claims")]
	public partial class Claim
	{
		[Column("id"), PrimaryKey, Identity] public int    Id   { get; set; } // int
		[Column(),     NotNull             ] public string Name { get; set; } // nvarchar(50)

		#region Associations

		/// <summary>
		/// FK_History_History_BackReference
		/// </summary>
		[Association(ThisKey="Id", OtherKey="ClaimId", CanBeNull=true, Relationship=Relationship.OneToMany, IsBackReference=true)]
		public IEnumerable<History> Histories { get; set; }

		#endregion
	}

	[Table(Schema="dbo", Name="History")]
	public partial class History
	{
		[Column("id"), PrimaryKey, Identity] public int      Id          { get; set; } // int
		[Column(),     NotNull             ] public int      ClaimId     { get; set; } // int
		[Column(),     NotNull             ] public int      Status      { get; set; } // int
		[Column(),     NotNull             ] public DateTime CreatedDate { get; set; } // datetime
		[Column(),     NotNull             ] public string   Comment     { get; set; } // nvarchar(50)

		#region Associations

		/// <summary>
		/// FK_History_History
		/// </summary>
		[Association(ThisKey="ClaimId", OtherKey="Id", CanBeNull=false, Relationship=Relationship.ManyToOne, KeyName="FK_History_History", BackReferenceName="Histories")]
		public Claim Claim { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static Claim Find(this ITable<Claim> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}

		public static History Find(this ITable<History> table, int Id)
		{
			return table.FirstOrDefault(t =>
				t.Id == Id);
		}
	}
}
